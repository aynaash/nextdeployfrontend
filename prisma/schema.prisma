generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum DeploymentStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

enum BillingStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  billings      Billing[]
  
  @@map(name: "users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Project {
  id          String       @id @default(uuid())
  name        String
  
  // Relations
  owner       User         @relation(fields: [ownerId], references: [id])
  ownerId     String
  deployments Deployment[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Deployment {
  id          String   @id @default(uuid())
  imageUrl    String
  status      DeploymentStatus
  
  // Relations
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Billing {
  id          String   @id @default(uuid())
  amount      Float
  status      BillingStatus
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  
  createdAt   DateTime @default(now())
}
