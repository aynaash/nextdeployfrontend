"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenSearchAclRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Opensearch ACL Rule resource models a single ACL Rule for an Aiven Opensearch service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const osUser = new aiven.ServiceUser("osUser", {
 *     project: _var.aiven_project_name,
 *     serviceName: aiven_opensearch.os_test.service_name,
 *     username: "documentation-user-1",
 * });
 * const osUser2 = new aiven.ServiceUser("osUser2", {
 *     project: _var.aiven_project_name,
 *     serviceName: aiven_opensearch.os_test.service_name,
 *     username: "documentation-user-2",
 * });
 * const osAclsConfig = new aiven.OpenSearchAclConfig("osAclsConfig", {
 *     project: _var.aiven_project_name,
 *     serviceName: aiven_opensearch.os_test.service_name,
 *     enabled: true,
 *     extendedAcl: false,
 * });
 * const aclRules = [
 *     {
 *         username: osUser.username,
 *         index: "index2",
 *         permission: "readwrite",
 *     },
 *     {
 *         username: osUser.username,
 *         index: "index3",
 *         permission: "read",
 *     },
 *     {
 *         username: osUser.username,
 *         index: "index5",
 *         permission: "deny",
 *     },
 *     {
 *         username: osUser2.username,
 *         index: "index3",
 *         permission: "write",
 *     },
 *     {
 *         username: osUser2.username,
 *         index: "index7",
 *         permission: "readwrite",
 *     },
 * ];
 * const osAclRule: aiven.OpenSearchAclRule[] = [];
 * for (const range of Object.entries(aclRules.map((v, k) => [k, v]).reduce((__obj, [, ]) => { ...__obj, [i]: v })).map(([k, v]) => ({key: k, value: v}))) {
 *     osAclRule.push(new aiven.OpenSearchAclRule(`osAclRule-${range.key}`, {
 *         project: osAclsConfig.project,
 *         serviceName: osAclsConfig.serviceName,
 *         username: range.value.username,
 *         index: range.value.index,
 *         permission: range.value.permission,
 *     }));
 * }
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/openSearchAclRule:OpenSearchAclRule os_acl_rule project/service_name/username/index
 * ```
 */
class OpenSearchAclRule extends pulumi.CustomResource {
    /**
     * Get an existing OpenSearchAclRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OpenSearchAclRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OpenSearchAclRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenSearchAclRule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.index === undefined) && !opts.urn) {
                throw new Error("Missing required property 'index'");
            }
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenSearchAclRule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.OpenSearchAclRule = OpenSearchAclRule;
/** @internal */
OpenSearchAclRule.__pulumiType = 'aiven:index/openSearchAclRule:OpenSearchAclRule';
//# sourceMappingURL=openSearchAclRule.js.map