"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClickhouseGrant = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Clickhouse Grant resource allows the creation and management of Grants in Aiven Clickhouse services.
 *
 * Notes:
 * * Due to a ambiguity in the GRANT syntax in clickhouse you should not have users and roles with the same name. It is not clear if a grant refers to the user or the role.
 * * Currently changes will first revoke all grants and then reissue the remaining grants for convergence.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const clickhouse = new aiven.Clickhouse("clickhouse", {
 *     project: _var.aiven_project_name,
 *     cloudName: "google-europe-west1",
 *     plan: "startup-8",
 *     serviceName: "exapmle-clickhouse",
 * });
 * const demodb = new aiven.ClickhouseDatabase("demodb", {
 *     project: clickhouse.project,
 *     serviceName: clickhouse.serviceName,
 * });
 * const demoClickhouseRole = new aiven.ClickhouseRole("demoClickhouseRole", {
 *     project: clickhouse.project,
 *     serviceName: clickhouse.serviceName,
 *     role: "demo-role",
 * });
 * const demo_role_grant = new aiven.ClickhouseGrant("demo-role-grant", {
 *     project: clickhouse.project,
 *     serviceName: clickhouse.serviceName,
 *     role: demoClickhouseRole.role,
 *     privilegeGrants: [
 *         {
 *             privilege: "INSERT",
 *             database: demodb.name,
 *             table: "*",
 *         },
 *         {
 *             privilege: "SELECT",
 *             database: demodb.name,
 *             table: "*",
 *         },
 *     ],
 * });
 * const demoClickhouseUser = new aiven.ClickhouseUser("demoClickhouseUser", {
 *     project: clickhouse.project,
 *     serviceName: clickhouse.serviceName,
 *     username: "demo-user",
 * });
 * const demo_user_grant = new aiven.ClickhouseGrant("demo-user-grant", {
 *     project: clickhouse.project,
 *     serviceName: clickhouse.serviceName,
 *     user: demoClickhouseUser.username,
 *     roleGrants: [{
 *         role: demoClickhouseRole.role,
 *     }],
 * });
 * ```
 */
class ClickhouseGrant extends pulumi.CustomResource {
    /**
     * Get an existing ClickhouseGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ClickhouseGrant(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ClickhouseGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClickhouseGrant.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["privilegeGrants"] = state ? state.privilegeGrants : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["roleGrants"] = state ? state.roleGrants : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["privilegeGrants"] = args ? args.privilegeGrants : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["roleGrants"] = args ? args.roleGrants : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClickhouseGrant.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ClickhouseGrant = ClickhouseGrant;
/** @internal */
ClickhouseGrant.__pulumiType = 'aiven:index/clickhouseGrant:ClickhouseGrant';
//# sourceMappingURL=clickhouseGrant.js.map