"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlinkJob = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Flink Job resource allows the creation and management of Aiven Jobs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const job = new aiven.FlinkJob("job", {
 *     project: aiven_flink.flink.project,
 *     serviceName: aiven_flink.flink.service_name,
 *     jobName: "<JOB_NAME>",
 *     tableIds: [
 *         aiven_flink_table.source.table_id,
 *         aiven_flink_table.sink.table_id,
 *     ],
 *     statement: `        INSERT INTO ${aiven_flink_table.sink.table_name}
 *         SELECT * FROM ${aiven_flink_table.source.table_name}
 *         WHERE `cpu` > 50
 * `,
 * });
 * ```
 */
class FlinkJob extends pulumi.CustomResource {
    /**
     * Get an existing FlinkJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FlinkJob(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FlinkJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlinkJob.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["jobName"] = state ? state.jobName : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["statement"] = state ? state.statement : undefined;
            resourceInputs["tableIds"] = state ? state.tableIds : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.jobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobName'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.statement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statement'");
            }
            if ((!args || args.tableIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableIds'");
            }
            resourceInputs["jobName"] = args ? args.jobName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["statement"] = args ? args.statement : undefined;
            resourceInputs["tableIds"] = args ? args.tableIds : undefined;
            resourceInputs["jobId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlinkJob.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FlinkJob = FlinkJob;
/** @internal */
FlinkJob.__pulumiType = 'aiven:index/flinkJob:FlinkJob';
//# sourceMappingURL=flinkJob.js.map