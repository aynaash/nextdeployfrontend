"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MirrorMakerReplicationFlow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The MirrorMaker 2 Replication Flow resource allows the creation and management of MirrorMaker 2 Replication Flows on Aiven Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const f1 = new aiven.MirrorMakerReplicationFlow("f1", {
 *     project: aiven_project["kafka-mm-project1"].project,
 *     serviceName: aiven_kafka.mm.service_name,
 *     sourceCluster: aiven_kafka.source.service_name,
 *     targetCluster: aiven_kafka.target.service_name,
 *     enable: true,
 *     topics: [".*"],
 *     topicsBlacklists: [
 *         ".*[\\-\\.]internal",
 *         ".*\\.replica",
 *         "__.*",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow f1 project/service_name/source_cluster/target_cluster
 * ```
 */
class MirrorMakerReplicationFlow extends pulumi.CustomResource {
    /**
     * Get an existing MirrorMakerReplicationFlow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MirrorMakerReplicationFlow(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MirrorMakerReplicationFlow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MirrorMakerReplicationFlow.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["emitHeartbeatsEnabled"] = state ? state.emitHeartbeatsEnabled : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["offsetSyncsTopicLocation"] = state ? state.offsetSyncsTopicLocation : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["replicationPolicyClass"] = state ? state.replicationPolicyClass : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sourceCluster"] = state ? state.sourceCluster : undefined;
            resourceInputs["syncGroupOffsetsEnabled"] = state ? state.syncGroupOffsetsEnabled : undefined;
            resourceInputs["syncGroupOffsetsIntervalSeconds"] = state ? state.syncGroupOffsetsIntervalSeconds : undefined;
            resourceInputs["targetCluster"] = state ? state.targetCluster : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
            resourceInputs["topicsBlacklists"] = state ? state.topicsBlacklists : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.enable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enable'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.sourceCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceCluster'");
            }
            if ((!args || args.targetCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetCluster'");
            }
            resourceInputs["emitHeartbeatsEnabled"] = args ? args.emitHeartbeatsEnabled : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["offsetSyncsTopicLocation"] = args ? args.offsetSyncsTopicLocation : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["replicationPolicyClass"] = args ? args.replicationPolicyClass : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["sourceCluster"] = args ? args.sourceCluster : undefined;
            resourceInputs["syncGroupOffsetsEnabled"] = args ? args.syncGroupOffsetsEnabled : undefined;
            resourceInputs["syncGroupOffsetsIntervalSeconds"] = args ? args.syncGroupOffsetsIntervalSeconds : undefined;
            resourceInputs["targetCluster"] = args ? args.targetCluster : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["topicsBlacklists"] = args ? args.topicsBlacklists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MirrorMakerReplicationFlow.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MirrorMakerReplicationFlow = MirrorMakerReplicationFlow;
/** @internal */
MirrorMakerReplicationFlow.__pulumiType = 'aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow';
//# sourceMappingURL=mirrorMakerReplicationFlow.js.map