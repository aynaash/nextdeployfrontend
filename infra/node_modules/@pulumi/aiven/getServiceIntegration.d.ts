import * as pulumi from "@pulumi/pulumi";
import * as outputs from "./types/output";
/**
 * The Service Integration data source provides information about the existing Aiven Service Integration.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myintegration = aiven.getServiceIntegration({
 *     project: aiven_project.myproject.project,
 *     destinationServiceName: "<DESTINATION_SERVICE_NAME>",
 *     integrationType: "datadog",
 *     sourceServiceName: "<SOURCE_SERVICE_NAME>",
 * });
 * ```
 */
export declare function getServiceIntegration(args: GetServiceIntegrationArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceIntegrationResult>;
/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationArgs {
    /**
     * Destination service for the integration (if any)
     */
    destinationServiceName: string;
    /**
     * Type of the service integration
     */
    integrationType: string;
    /**
     * Project the integration belongs to
     */
    project: string;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName: string;
}
/**
 * A collection of values returned by getServiceIntegration.
 */
export interface GetServiceIntegrationResult {
    /**
     * ClickhouseKafka user configurable settings
     */
    readonly clickhouseKafkaUserConfigs: outputs.GetServiceIntegrationClickhouseKafkaUserConfig[];
    /**
     * ClickhousePostgresql user configurable settings
     */
    readonly clickhousePostgresqlUserConfigs: outputs.GetServiceIntegrationClickhousePostgresqlUserConfig[];
    /**
     * Datadog user configurable settings
     */
    readonly datadogUserConfigs: outputs.GetServiceIntegrationDatadogUserConfig[];
    /**
     * Destination endpoint for the integration (if any)
     */
    readonly destinationEndpointId: string;
    /**
     * Destination service for the integration (if any)
     */
    readonly destinationServiceName: string;
    /**
     * ExternalAwsCloudwatchMetrics user configurable settings
     */
    readonly externalAwsCloudwatchMetricsUserConfigs: outputs.GetServiceIntegrationExternalAwsCloudwatchMetricsUserConfig[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Service Integration Id at aiven
     */
    readonly integrationId: string;
    /**
     * Type of the service integration
     */
    readonly integrationType: string;
    /**
     * KafkaConnect user configurable settings
     */
    readonly kafkaConnectUserConfigs: outputs.GetServiceIntegrationKafkaConnectUserConfig[];
    /**
     * KafkaLogs user configurable settings
     */
    readonly kafkaLogsUserConfigs: outputs.GetServiceIntegrationKafkaLogsUserConfig[];
    /**
     * KafkaMirrormaker user configurable settings
     */
    readonly kafkaMirrormakerUserConfigs: outputs.GetServiceIntegrationKafkaMirrormakerUserConfig[];
    /**
     * Logs user configurable settings
     */
    readonly logsUserConfigs: outputs.GetServiceIntegrationLogsUserConfig[];
    /**
     * Metrics user configurable settings
     */
    readonly metricsUserConfigs: outputs.GetServiceIntegrationMetricsUserConfig[];
    /**
     * Mirrormaker user configurable settings
     */
    readonly mirrormakerUserConfigs: outputs.GetServiceIntegrationMirrormakerUserConfig[];
    /**
     * Project the integration belongs to
     */
    readonly project: string;
    /**
     * Source endpoint for the integration (if any)
     */
    readonly sourceEndpointId: string;
    /**
     * Source service for the integration (if any)
     */
    readonly sourceServiceName: string;
}
/**
 * The Service Integration data source provides information about the existing Aiven Service Integration.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service, getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to Elasticsearch, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myintegration = aiven.getServiceIntegration({
 *     project: aiven_project.myproject.project,
 *     destinationServiceName: "<DESTINATION_SERVICE_NAME>",
 *     integrationType: "datadog",
 *     sourceServiceName: "<SOURCE_SERVICE_NAME>",
 * });
 * ```
 */
export declare function getServiceIntegrationOutput(args: GetServiceIntegrationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceIntegrationResult>;
/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationOutputArgs {
    /**
     * Destination service for the integration (if any)
     */
    destinationServiceName: pulumi.Input<string>;
    /**
     * Type of the service integration
     */
    integrationType: pulumi.Input<string>;
    /**
     * Project the integration belongs to
     */
    project: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName: pulumi.Input<string>;
}
