"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.KafkaConnector = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Kafka connectors resource allows the creation and management of Aiven Kafka connectors.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const kafka_os_con1 = new aiven.KafkaConnector("kafka-os-con1", {
 *     project: aiven_project["kafka-con-project1"].project,
 *     serviceName: aiven_kafka["kafka-service1"].service_name,
 *     connectorName: "kafka-os-con1",
 *     config: {
 *         topics: aiven_kafka_topic["kafka-topic1"].topic_name,
 *         "connector.class": "io.aiven.kafka.connect.opensearch.OpensearchSinkConnector",
 *         "type.name": "os-connector",
 *         name: "kafka-os-con1",
 *         "connection.url": aiven_elasticsearch["os-service1"].service_uri,
 *         "connection.username": aiven_opensearch["os-service1"].service_username,
 *         "connection.password": aiven_opensearch["os-service1"].service_password,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/kafkaConnector:KafkaConnector kafka-os-con1 project/service_name/connector_name
 * ```
 */
class KafkaConnector extends pulumi.CustomResource {
    /**
     * Get an existing KafkaConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new KafkaConnector(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of KafkaConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaConnector.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["connectorName"] = state ? state.connectorName : undefined;
            resourceInputs["pluginAuthor"] = state ? state.pluginAuthor : undefined;
            resourceInputs["pluginClass"] = state ? state.pluginClass : undefined;
            resourceInputs["pluginDocUrl"] = state ? state.pluginDocUrl : undefined;
            resourceInputs["pluginTitle"] = state ? state.pluginTitle : undefined;
            resourceInputs["pluginType"] = state ? state.pluginType : undefined;
            resourceInputs["pluginVersion"] = state ? state.pluginVersion : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["tasks"] = state ? state.tasks : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.connectorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorName'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["config"] = (args === null || args === void 0 ? void 0 : args.config) ? pulumi.secret(args.config) : undefined;
            resourceInputs["connectorName"] = args ? args.connectorName : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["pluginAuthor"] = undefined /*out*/;
            resourceInputs["pluginClass"] = undefined /*out*/;
            resourceInputs["pluginDocUrl"] = undefined /*out*/;
            resourceInputs["pluginTitle"] = undefined /*out*/;
            resourceInputs["pluginType"] = undefined /*out*/;
            resourceInputs["pluginVersion"] = undefined /*out*/;
            resourceInputs["tasks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["config"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KafkaConnector.__pulumiType, name, resourceInputs, opts);
    }
}
exports.KafkaConnector = KafkaConnector;
/** @internal */
KafkaConnector.__pulumiType = 'aiven:index/kafkaConnector:KafkaConnector';
//# sourceMappingURL=kafkaConnector.js.map