"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceIntegration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Service Integration resource allows the creation and management of Aiven Service Integrations.
 *
 * **Note** For services running on `hobbyist` plan service integrations are not supported.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external
 * integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service,
 * getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to
 * Elasticsearch, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myIntegrationMetrics = new aiven.ServiceIntegration("myIntegrationMetrics", {
 *     project: aiven_project.myproject.project,
 *     integrationType: "metrics",
 *     sourceServiceName: aiven_kafka.kfk1.service_name,
 *     destinationServiceName: aiven_m3db.m3db.service_name,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/serviceIntegration:ServiceIntegration myintegration project/integration_id
 * ```
 */
class ServiceIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ServiceIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServiceIntegration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServiceIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceIntegration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clickhouseKafkaUserConfig"] = state ? state.clickhouseKafkaUserConfig : undefined;
            resourceInputs["clickhousePostgresqlUserConfig"] = state ? state.clickhousePostgresqlUserConfig : undefined;
            resourceInputs["datadogUserConfig"] = state ? state.datadogUserConfig : undefined;
            resourceInputs["destinationEndpointId"] = state ? state.destinationEndpointId : undefined;
            resourceInputs["destinationServiceName"] = state ? state.destinationServiceName : undefined;
            resourceInputs["externalAwsCloudwatchMetricsUserConfig"] = state ? state.externalAwsCloudwatchMetricsUserConfig : undefined;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["integrationType"] = state ? state.integrationType : undefined;
            resourceInputs["kafkaConnectUserConfig"] = state ? state.kafkaConnectUserConfig : undefined;
            resourceInputs["kafkaLogsUserConfig"] = state ? state.kafkaLogsUserConfig : undefined;
            resourceInputs["kafkaMirrormakerUserConfig"] = state ? state.kafkaMirrormakerUserConfig : undefined;
            resourceInputs["logsUserConfig"] = state ? state.logsUserConfig : undefined;
            resourceInputs["metricsUserConfig"] = state ? state.metricsUserConfig : undefined;
            resourceInputs["mirrormakerUserConfig"] = state ? state.mirrormakerUserConfig : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["sourceEndpointId"] = state ? state.sourceEndpointId : undefined;
            resourceInputs["sourceServiceName"] = state ? state.sourceServiceName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.integrationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationType'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["clickhouseKafkaUserConfig"] = args ? args.clickhouseKafkaUserConfig : undefined;
            resourceInputs["clickhousePostgresqlUserConfig"] = args ? args.clickhousePostgresqlUserConfig : undefined;
            resourceInputs["datadogUserConfig"] = args ? args.datadogUserConfig : undefined;
            resourceInputs["destinationEndpointId"] = args ? args.destinationEndpointId : undefined;
            resourceInputs["destinationServiceName"] = args ? args.destinationServiceName : undefined;
            resourceInputs["externalAwsCloudwatchMetricsUserConfig"] = args ? args.externalAwsCloudwatchMetricsUserConfig : undefined;
            resourceInputs["integrationType"] = args ? args.integrationType : undefined;
            resourceInputs["kafkaConnectUserConfig"] = args ? args.kafkaConnectUserConfig : undefined;
            resourceInputs["kafkaLogsUserConfig"] = args ? args.kafkaLogsUserConfig : undefined;
            resourceInputs["kafkaMirrormakerUserConfig"] = args ? args.kafkaMirrormakerUserConfig : undefined;
            resourceInputs["logsUserConfig"] = args ? args.logsUserConfig : undefined;
            resourceInputs["metricsUserConfig"] = args ? args.metricsUserConfig : undefined;
            resourceInputs["mirrormakerUserConfig"] = args ? args.mirrormakerUserConfig : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sourceEndpointId"] = args ? args.sourceEndpointId : undefined;
            resourceInputs["sourceServiceName"] = args ? args.sourceServiceName : undefined;
            resourceInputs["integrationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceIntegration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ServiceIntegration = ServiceIntegration;
/** @internal */
ServiceIntegration.__pulumiType = 'aiven:index/serviceIntegration:ServiceIntegration';
//# sourceMappingURL=serviceIntegration.js.map