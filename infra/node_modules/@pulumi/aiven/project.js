"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Project resource allows the creation and management of Aiven Projects.
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/project:Project myproject project
 * ```
 */
class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Project(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["addAccountOwnersAdminAccess"] = state ? state.addAccountOwnersAdminAccess : undefined;
            resourceInputs["availableCredits"] = state ? state.availableCredits : undefined;
            resourceInputs["billingGroup"] = state ? state.billingGroup : undefined;
            resourceInputs["caCert"] = state ? state.caCert : undefined;
            resourceInputs["copyFromProject"] = state ? state.copyFromProject : undefined;
            resourceInputs["defaultCloud"] = state ? state.defaultCloud : undefined;
            resourceInputs["estimatedBalance"] = state ? state.estimatedBalance : undefined;
            resourceInputs["paymentMethod"] = state ? state.paymentMethod : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["technicalEmails"] = state ? state.technicalEmails : undefined;
            resourceInputs["useSourceProjectBillingGroup"] = state ? state.useSourceProjectBillingGroup : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["addAccountOwnersAdminAccess"] = args ? args.addAccountOwnersAdminAccess : undefined;
            resourceInputs["availableCredits"] = args ? args.availableCredits : undefined;
            resourceInputs["billingGroup"] = args ? args.billingGroup : undefined;
            resourceInputs["copyFromProject"] = args ? args.copyFromProject : undefined;
            resourceInputs["defaultCloud"] = args ? args.defaultCloud : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["technicalEmails"] = args ? args.technicalEmails : undefined;
            resourceInputs["useSourceProjectBillingGroup"] = args ? args.useSourceProjectBillingGroup : undefined;
            resourceInputs["caCert"] = undefined /*out*/;
            resourceInputs["estimatedBalance"] = undefined /*out*/;
            resourceInputs["paymentMethod"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCert"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Project = Project;
/** @internal */
Project.__pulumiType = 'aiven:index/project:Project';
//# sourceMappingURL=project.js.map