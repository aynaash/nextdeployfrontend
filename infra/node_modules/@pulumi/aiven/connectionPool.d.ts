import * as pulumi from "@pulumi/pulumi";
/**
 * The Connection Pool resource allows the creation and management of Aiven Connection Pools.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const mytestpool = new aiven.ConnectionPool("mytestpool", {
 *     project: aiven_project.myproject.project,
 *     serviceName: aiven_pg.mypg.service_name,
 *     databaseName: aiven_pg_database.mypgdatabase.database_name,
 *     poolMode: "transaction",
 *     poolName: "mypool",
 *     poolSize: 10,
 *     username: aiven_pg_user.mypguser.username,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/connectionPool:ConnectionPool mytestpool project/service_name/pool_name
 * ```
 */
export declare class ConnectionPool extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionPoolState, opts?: pulumi.CustomResourceOptions): ConnectionPool;
    /**
     * Returns true if the given object is an instance of ConnectionPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ConnectionPool;
    /**
     * The URI for connecting to the pool
     */
    readonly connectionUri: pulumi.Output<string>;
    /**
     * The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    readonly databaseName: pulumi.Output<string>;
    /**
     * The mode the pool operates in The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
     */
    readonly poolMode: pulumi.Output<string | undefined>;
    /**
     * The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
     */
    readonly poolName: pulumi.Output<string>;
    /**
     * The number of connections the pool may create towards the backend server. This does not affect the number of incoming connections, which is always a much larger number. The default value is `10`.
     */
    readonly poolSize: pulumi.Output<number | undefined>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    readonly project: pulumi.Output<string>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    readonly serviceName: pulumi.Output<string>;
    /**
     * The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
     */
    readonly username: pulumi.Output<string | undefined>;
    /**
     * Create a ConnectionPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionPoolArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ConnectionPool resources.
 */
export interface ConnectionPoolState {
    /**
     * The URI for connecting to the pool
     */
    connectionUri?: pulumi.Input<string>;
    /**
     * The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The mode the pool operates in The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
     */
    poolMode?: pulumi.Input<string>;
    /**
     * The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
     */
    poolName?: pulumi.Input<string>;
    /**
     * The number of connections the pool may create towards the backend server. This does not affect the number of incoming connections, which is always a much larger number. The default value is `10`.
     */
    poolSize?: pulumi.Input<number>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    project?: pulumi.Input<string>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
     */
    username?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ConnectionPool resource.
 */
export interface ConnectionPoolArgs {
    /**
     * The name of the database the pool connects to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    databaseName: pulumi.Input<string>;
    /**
     * The mode the pool operates in The possible values are `session`, `transaction` and `statement`. The default value is `transaction`.
     */
    poolMode?: pulumi.Input<string>;
    /**
     * The name of the created pool. This property cannot be changed, doing so forces recreation of the resource.
     */
    poolName: pulumi.Input<string>;
    /**
     * The number of connections the pool may create towards the backend server. This does not affect the number of incoming connections, which is always a much larger number. The default value is `10`.
     */
    poolSize?: pulumi.Input<number>;
    /**
     * Identifies the project this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    project: pulumi.Input<string>;
    /**
     * Specifies the name of the service that this resource belongs to. To set up proper dependencies please refer to this variable as a reference. This property cannot be changed, doing so forces recreation of the resource.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The name of the service user used to connect to the database. To set up proper dependencies please refer to this variable as a reference.
     */
    username?: pulumi.Input<string>;
}
