import * as pulumi from "@pulumi/pulumi";
/**
 * The Account Team Project data source provides information about the existing Account Team Project.
 */
export declare function getAccountTeamProject(args: GetAccountTeamProjectArgs, opts?: pulumi.InvokeOptions): Promise<GetAccountTeamProjectResult>;
/**
 * A collection of arguments for invoking getAccountTeamProject.
 */
export interface GetAccountTeamProjectArgs {
    /**
     * The unique account id
     */
    accountId: string;
    /**
     * The name of an already existing project
     */
    projectName: string;
    /**
     * An account team id
     */
    teamId: string;
}
/**
 * A collection of values returned by getAccountTeamProject.
 */
export interface GetAccountTeamProjectResult {
    /**
     * The unique account id
     */
    readonly accountId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of an already existing project
     */
    readonly projectName: string;
    /**
     * An account team id
     */
    readonly teamId: string;
    /**
     * The Account team project type The possible values are `admin`, `developer`, `operator` and `readOnly`.
     */
    readonly teamType: string;
}
/**
 * The Account Team Project data source provides information about the existing Account Team Project.
 */
export declare function getAccountTeamProjectOutput(args: GetAccountTeamProjectOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccountTeamProjectResult>;
/**
 * A collection of arguments for invoking getAccountTeamProject.
 */
export interface GetAccountTeamProjectOutputArgs {
    /**
     * The unique account id
     */
    accountId: pulumi.Input<string>;
    /**
     * The name of an already existing project
     */
    projectName: pulumi.Input<string>;
    /**
     * An account team id
     */
    teamId: pulumi.Input<string>;
}
