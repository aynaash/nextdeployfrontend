import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * The Service Integration resource allows the creation and management of Aiven Service Integrations.
 *
 * **Note** For services running on `hobbyist` plan service integrations are not supported.
 *
 * Service Integration defines an integration between two Aiven services or between Aiven service and an external
 * integration endpoint. Integration could be for example sending metrics from Kafka service to an InfluxDB service,
 * getting metrics from an InfluxDB service to a Grafana service to show dashboards, sending logs from any service to
 * Elasticsearch, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myIntegrationMetrics = new aiven.ServiceIntegration("myIntegrationMetrics", {
 *     project: aiven_project.myproject.project,
 *     integrationType: "metrics",
 *     sourceServiceName: aiven_kafka.kfk1.service_name,
 *     destinationServiceName: aiven_m3db.m3db.service_name,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/serviceIntegration:ServiceIntegration myintegration project/integration_id
 * ```
 */
export declare class ServiceIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ServiceIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceIntegrationState, opts?: pulumi.CustomResourceOptions): ServiceIntegration;
    /**
     * Returns true if the given object is an instance of ServiceIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ServiceIntegration;
    /**
     * ClickhouseKafka user configurable settings
     */
    readonly clickhouseKafkaUserConfig: pulumi.Output<outputs.ServiceIntegrationClickhouseKafkaUserConfig | undefined>;
    /**
     * ClickhousePostgresql user configurable settings
     */
    readonly clickhousePostgresqlUserConfig: pulumi.Output<outputs.ServiceIntegrationClickhousePostgresqlUserConfig | undefined>;
    /**
     * Datadog user configurable settings
     */
    readonly datadogUserConfig: pulumi.Output<outputs.ServiceIntegrationDatadogUserConfig | undefined>;
    /**
     * Destination endpoint for the integration (if any)
     */
    readonly destinationEndpointId: pulumi.Output<string | undefined>;
    /**
     * Destination service for the integration (if any)
     */
    readonly destinationServiceName: pulumi.Output<string | undefined>;
    /**
     * ExternalAwsCloudwatchMetrics user configurable settings
     */
    readonly externalAwsCloudwatchMetricsUserConfig: pulumi.Output<outputs.ServiceIntegrationExternalAwsCloudwatchMetricsUserConfig | undefined>;
    /**
     * Service Integration Id at aiven
     */
    readonly integrationId: pulumi.Output<string>;
    /**
     * Type of the service integration
     */
    readonly integrationType: pulumi.Output<string>;
    /**
     * KafkaConnect user configurable settings
     */
    readonly kafkaConnectUserConfig: pulumi.Output<outputs.ServiceIntegrationKafkaConnectUserConfig | undefined>;
    /**
     * KafkaLogs user configurable settings
     */
    readonly kafkaLogsUserConfig: pulumi.Output<outputs.ServiceIntegrationKafkaLogsUserConfig | undefined>;
    /**
     * KafkaMirrormaker user configurable settings
     */
    readonly kafkaMirrormakerUserConfig: pulumi.Output<outputs.ServiceIntegrationKafkaMirrormakerUserConfig | undefined>;
    /**
     * Logs user configurable settings
     */
    readonly logsUserConfig: pulumi.Output<outputs.ServiceIntegrationLogsUserConfig | undefined>;
    /**
     * Metrics user configurable settings
     */
    readonly metricsUserConfig: pulumi.Output<outputs.ServiceIntegrationMetricsUserConfig | undefined>;
    /**
     * Mirrormaker user configurable settings
     */
    readonly mirrormakerUserConfig: pulumi.Output<outputs.ServiceIntegrationMirrormakerUserConfig | undefined>;
    /**
     * Project the integration belongs to
     */
    readonly project: pulumi.Output<string>;
    /**
     * Source endpoint for the integration (if any)
     */
    readonly sourceEndpointId: pulumi.Output<string | undefined>;
    /**
     * Source service for the integration (if any)
     */
    readonly sourceServiceName: pulumi.Output<string | undefined>;
    /**
     * Create a ServiceIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceIntegrationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ServiceIntegration resources.
 */
export interface ServiceIntegrationState {
    /**
     * ClickhouseKafka user configurable settings
     */
    clickhouseKafkaUserConfig?: pulumi.Input<inputs.ServiceIntegrationClickhouseKafkaUserConfig>;
    /**
     * ClickhousePostgresql user configurable settings
     */
    clickhousePostgresqlUserConfig?: pulumi.Input<inputs.ServiceIntegrationClickhousePostgresqlUserConfig>;
    /**
     * Datadog user configurable settings
     */
    datadogUserConfig?: pulumi.Input<inputs.ServiceIntegrationDatadogUserConfig>;
    /**
     * Destination endpoint for the integration (if any)
     */
    destinationEndpointId?: pulumi.Input<string>;
    /**
     * Destination service for the integration (if any)
     */
    destinationServiceName?: pulumi.Input<string>;
    /**
     * ExternalAwsCloudwatchMetrics user configurable settings
     */
    externalAwsCloudwatchMetricsUserConfig?: pulumi.Input<inputs.ServiceIntegrationExternalAwsCloudwatchMetricsUserConfig>;
    /**
     * Service Integration Id at aiven
     */
    integrationId?: pulumi.Input<string>;
    /**
     * Type of the service integration
     */
    integrationType?: pulumi.Input<string>;
    /**
     * KafkaConnect user configurable settings
     */
    kafkaConnectUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaConnectUserConfig>;
    /**
     * KafkaLogs user configurable settings
     */
    kafkaLogsUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaLogsUserConfig>;
    /**
     * KafkaMirrormaker user configurable settings
     */
    kafkaMirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaMirrormakerUserConfig>;
    /**
     * Logs user configurable settings
     */
    logsUserConfig?: pulumi.Input<inputs.ServiceIntegrationLogsUserConfig>;
    /**
     * Metrics user configurable settings
     */
    metricsUserConfig?: pulumi.Input<inputs.ServiceIntegrationMetricsUserConfig>;
    /**
     * Mirrormaker user configurable settings
     */
    mirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationMirrormakerUserConfig>;
    /**
     * Project the integration belongs to
     */
    project?: pulumi.Input<string>;
    /**
     * Source endpoint for the integration (if any)
     */
    sourceEndpointId?: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ServiceIntegration resource.
 */
export interface ServiceIntegrationArgs {
    /**
     * ClickhouseKafka user configurable settings
     */
    clickhouseKafkaUserConfig?: pulumi.Input<inputs.ServiceIntegrationClickhouseKafkaUserConfig>;
    /**
     * ClickhousePostgresql user configurable settings
     */
    clickhousePostgresqlUserConfig?: pulumi.Input<inputs.ServiceIntegrationClickhousePostgresqlUserConfig>;
    /**
     * Datadog user configurable settings
     */
    datadogUserConfig?: pulumi.Input<inputs.ServiceIntegrationDatadogUserConfig>;
    /**
     * Destination endpoint for the integration (if any)
     */
    destinationEndpointId?: pulumi.Input<string>;
    /**
     * Destination service for the integration (if any)
     */
    destinationServiceName?: pulumi.Input<string>;
    /**
     * ExternalAwsCloudwatchMetrics user configurable settings
     */
    externalAwsCloudwatchMetricsUserConfig?: pulumi.Input<inputs.ServiceIntegrationExternalAwsCloudwatchMetricsUserConfig>;
    /**
     * Type of the service integration
     */
    integrationType: pulumi.Input<string>;
    /**
     * KafkaConnect user configurable settings
     */
    kafkaConnectUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaConnectUserConfig>;
    /**
     * KafkaLogs user configurable settings
     */
    kafkaLogsUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaLogsUserConfig>;
    /**
     * KafkaMirrormaker user configurable settings
     */
    kafkaMirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationKafkaMirrormakerUserConfig>;
    /**
     * Logs user configurable settings
     */
    logsUserConfig?: pulumi.Input<inputs.ServiceIntegrationLogsUserConfig>;
    /**
     * Metrics user configurable settings
     */
    metricsUserConfig?: pulumi.Input<inputs.ServiceIntegrationMetricsUserConfig>;
    /**
     * Mirrormaker user configurable settings
     */
    mirrormakerUserConfig?: pulumi.Input<inputs.ServiceIntegrationMirrormakerUserConfig>;
    /**
     * Project the integration belongs to
     */
    project: pulumi.Input<string>;
    /**
     * Source endpoint for the integration (if any)
     */
    sourceEndpointId?: pulumi.Input<string>;
    /**
     * Source service for the integration (if any)
     */
    sourceServiceName?: pulumi.Input<string>;
}
