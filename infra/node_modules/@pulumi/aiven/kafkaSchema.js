"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.KafkaSchema = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Kafka Schema resource allows the creation and management of Aiven Kafka Schemas.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const kafka_schema1 = new aiven.KafkaSchema("kafka-schema1", {
 *     project: aiven_project["kafka-schemas-project1"].project,
 *     serviceName: aiven_kafka["kafka-service1"].service_name,
 *     subjectName: "kafka-schema1",
 *     compatibilityLevel: "FORWARD",
 *     schema: `    {
 *        "doc": "example",
 *        "fields": [{
 *            "default": 5,
 *            "doc": "my test number",
 *            "name": "test",
 *            "namespace": "test",
 *            "type": "int"
 *        }],
 *        "name": "example",
 *        "namespace": "example",
 *        "type": "record"
 *     }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/kafkaSchema:KafkaSchema kafka-schema1 project/service_name/subject_name
 * ```
 */
class KafkaSchema extends pulumi.CustomResource {
    /**
     * Get an existing KafkaSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new KafkaSchema(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of KafkaSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaSchema.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["compatibilityLevel"] = state ? state.compatibilityLevel : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["schemaType"] = state ? state.schemaType : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["subjectName"] = state ? state.subjectName : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.subjectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subjectName'");
            }
            resourceInputs["compatibilityLevel"] = args ? args.compatibilityLevel : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["schemaType"] = args ? args.schemaType : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["subjectName"] = args ? args.subjectName : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaSchema.__pulumiType, name, resourceInputs, opts);
    }
}
exports.KafkaSchema = KafkaSchema;
/** @internal */
KafkaSchema.__pulumiType = 'aiven:index/kafkaSchema:KafkaSchema';
//# sourceMappingURL=kafkaSchema.js.map