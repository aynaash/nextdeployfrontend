"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GcpVpcPeeringConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The GCP VPC Peering Connection resource allows the creation and management of Aiven GCP VPC Peering Connections.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const foo = new aiven.GcpVpcPeeringConnection("foo", {
 *     vpcId: data.aiven_project_vpc.vpc.id,
 *     gcpProjectId: "xxxx",
 *     peerVpc: "xxxx",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/gcpVpcPeeringConnection:GcpVpcPeeringConnection foo project_name/vpc_id/gcp_project_id/peer_vpc
 * ```
 */
class GcpVpcPeeringConnection extends pulumi.CustomResource {
    /**
     * Get an existing GcpVpcPeeringConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GcpVpcPeeringConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GcpVpcPeeringConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpVpcPeeringConnection.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["gcpProjectId"] = state ? state.gcpProjectId : undefined;
            resourceInputs["peerVpc"] = state ? state.peerVpc : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateInfo"] = state ? state.stateInfo : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.gcpProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gcpProjectId'");
            }
            if ((!args || args.peerVpc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerVpc'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["gcpProjectId"] = args ? args.gcpProjectId : undefined;
            resourceInputs["peerVpc"] = args ? args.peerVpc : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateInfo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpVpcPeeringConnection.__pulumiType, name, resourceInputs, opts);
    }
}
exports.GcpVpcPeeringConnection = GcpVpcPeeringConnection;
/** @internal */
GcpVpcPeeringConnection.__pulumiType = 'aiven:index/gcpVpcPeeringConnection:GcpVpcPeeringConnection';
//# sourceMappingURL=gcpVpcPeeringConnection.js.map