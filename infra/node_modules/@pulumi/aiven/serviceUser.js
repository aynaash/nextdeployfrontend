"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceUser = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Service User resource allows the creation and management of Aiven Service Users.
 *
 * > **Note:** This resource is deprecated. Please use service-specific resources instead of this one, for example: aiven_kafka_user, aiven.PgUser etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const myserviceuser = new aiven.ServiceUser("myserviceuser", {
 *     project: aiven_project.myproject.project,
 *     serviceName: aiven_pg.mypg.service_name,
 *     username: "<USERNAME>",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/serviceUser:ServiceUser myserviceuser project/service_name/username
 * ```
 */
class ServiceUser extends pulumi.CustomResource {
    /**
     * Get an existing ServiceUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServiceUser(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServiceUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceUser.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessCert"] = state ? state.accessCert : undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pgAllowReplication"] = state ? state.pgAllowReplication : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["redisAclCategories"] = state ? state.redisAclCategories : undefined;
            resourceInputs["redisAclChannels"] = state ? state.redisAclChannels : undefined;
            resourceInputs["redisAclCommands"] = state ? state.redisAclCommands : undefined;
            resourceInputs["redisAclKeys"] = state ? state.redisAclKeys : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["pgAllowReplication"] = args ? args.pgAllowReplication : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["redisAclCategories"] = args ? args.redisAclCategories : undefined;
            resourceInputs["redisAclChannels"] = args ? args.redisAclChannels : undefined;
            resourceInputs["redisAclCommands"] = args ? args.redisAclCommands : undefined;
            resourceInputs["redisAclKeys"] = args ? args.redisAclKeys : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["accessCert"] = undefined /*out*/;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessCert", "accessKey", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceUser.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ServiceUser = ServiceUser;
/** @internal */
ServiceUser.__pulumiType = 'aiven:index/serviceUser:ServiceUser';
//# sourceMappingURL=serviceUser.js.map