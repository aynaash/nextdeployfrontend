"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlinkJobTable = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Flink Table resource allows the creation and management of Aiven Tables.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const table = new aiven.FlinkJobTable("table", {
 *     project: data.aiven_project.pr1.project,
 *     serviceName: aiven_flink.flink.service_name,
 *     tableName: "<TABLE_NAME>",
 *     integrationId: aiven_service_integration.flink_kafka.service_id,
 *     jdbcTable: "<JDBC_TABLE_NAME>",
 *     kafkaTopic: aiven_kafka_topic.table_topic.topic_name,
 *     schemaSql: `      \`+"\`cpu\`"+\` INT,
 *       \`+"\`node\`"+\` INT,
 *       \`+"\`occurred_at\`"+\` TIMESTAMP(3) METADATA FROM 'timestamp',
 *       WATERMARK FOR \`+"\`occurred_at\`"+\` AS \`+"\`occurred_at\`"+\` - INTERVAL '5' SECOND
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/flinkJobTable:FlinkJobTable table project/service_name/table_id
 * ```
 */
class FlinkJobTable extends pulumi.CustomResource {
    /**
     * Get an existing FlinkJobTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FlinkJobTable(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FlinkJobTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlinkJobTable.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["jdbcTable"] = state ? state.jdbcTable : undefined;
            resourceInputs["kafkaConnectorType"] = state ? state.kafkaConnectorType : undefined;
            resourceInputs["kafkaKeyFields"] = state ? state.kafkaKeyFields : undefined;
            resourceInputs["kafkaKeyFormat"] = state ? state.kafkaKeyFormat : undefined;
            resourceInputs["kafkaStartupMode"] = state ? state.kafkaStartupMode : undefined;
            resourceInputs["kafkaTopic"] = state ? state.kafkaTopic : undefined;
            resourceInputs["kafkaValueFieldsInclude"] = state ? state.kafkaValueFieldsInclude : undefined;
            resourceInputs["kafkaValueFormat"] = state ? state.kafkaValueFormat : undefined;
            resourceInputs["likeOptions"] = state ? state.likeOptions : undefined;
            resourceInputs["opensearchIndex"] = state ? state.opensearchIndex : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["schemaSql"] = state ? state.schemaSql : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["tableId"] = state ? state.tableId : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
            resourceInputs["upsertKafka"] = state ? state.upsertKafka : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.integrationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationId'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.schemaSql === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaSql'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.tableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            resourceInputs["integrationId"] = args ? args.integrationId : undefined;
            resourceInputs["jdbcTable"] = args ? args.jdbcTable : undefined;
            resourceInputs["kafkaConnectorType"] = args ? args.kafkaConnectorType : undefined;
            resourceInputs["kafkaKeyFields"] = args ? args.kafkaKeyFields : undefined;
            resourceInputs["kafkaKeyFormat"] = args ? args.kafkaKeyFormat : undefined;
            resourceInputs["kafkaStartupMode"] = args ? args.kafkaStartupMode : undefined;
            resourceInputs["kafkaTopic"] = args ? args.kafkaTopic : undefined;
            resourceInputs["kafkaValueFieldsInclude"] = args ? args.kafkaValueFieldsInclude : undefined;
            resourceInputs["kafkaValueFormat"] = args ? args.kafkaValueFormat : undefined;
            resourceInputs["likeOptions"] = args ? args.likeOptions : undefined;
            resourceInputs["opensearchIndex"] = args ? args.opensearchIndex : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["schemaSql"] = args ? args.schemaSql : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["upsertKafka"] = args ? args.upsertKafka : undefined;
            resourceInputs["tableId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlinkJobTable.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FlinkJobTable = FlinkJobTable;
/** @internal */
FlinkJobTable.__pulumiType = 'aiven:index/flinkJobTable:FlinkJobTable';
//# sourceMappingURL=flinkJobTable.js.map