"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCassandraOutput = exports.getCassandra = exports.getCassandaOutput = exports.getCassanda = exports.getBillingGroupOutput = exports.getBillingGroup = exports.getAzureVpcPeeringConnectionOutput = exports.getAzureVpcPeeringConnection = exports.getAzurePrivatelinkOutput = exports.getAzurePrivatelink = exports.getAwsVpcPeeringConnectionOutput = exports.getAwsVpcPeeringConnection = exports.getAwsPrivatelinkOutput = exports.getAwsPrivatelink = exports.getAccountTeamProjectOutput = exports.getAccountTeamProject = exports.getAccountTeamMemberOutput = exports.getAccountTeamMember = exports.getAccountTeamOutput = exports.getAccountTeam = exports.getAccountAuthenticationOutput = exports.getAccountAuthentication = exports.getAccountOutput = exports.getAccount = exports.GcpVpcPeeringConnection = exports.FlinkJobTable = exports.FlinkJob = exports.FlinkApplicationVersion = exports.FlinkApplication = exports.Flink = exports.Database = exports.ConnectionPool = exports.ClickhouseUser = exports.ClickhouseRole = exports.ClickhouseGrant = exports.ClickhouseDatabase = exports.Clickhouse = exports.CassandraUser = exports.Cassandra = exports.BillingGroup = exports.AzureVpcPeeringConnection = exports.AzurePrivatelinkConnectionApproval = exports.AzurePrivatelink = exports.AwsVpcPeeringConnection = exports.AwsPrivatelink = exports.AccountTeamProject = exports.AccountTeamMember = exports.AccountTeam = exports.AccountAuthentication = exports.Account = void 0;
exports.getM3AggregatorOutput = exports.getM3Aggregator = exports.getKafkaUserOutput = exports.getKafkaUser = exports.getKafkaTopicOutput = exports.getKafkaTopic = exports.getKafkaSchemaRegistryAclOutput = exports.getKafkaSchemaRegistryAcl = exports.getKafkaSchemaConfigurationOutput = exports.getKafkaSchemaConfiguration = exports.getKafkaSchemaOutput = exports.getKafkaSchema = exports.getKafkaMirrorMakerOutput = exports.getKafkaMirrorMaker = exports.getKafkaConnectorOutput = exports.getKafkaConnector = exports.getKafkaConnectOutput = exports.getKafkaConnect = exports.getKafkaAclOutput = exports.getKafkaAcl = exports.getKafkaOutput = exports.getKafka = exports.getInfluxdbUserOutput = exports.getInfluxdbUser = exports.getInfluxdbDatabaseOutput = exports.getInfluxdbDatabase = exports.getInfluxDbOutput = exports.getInfluxDb = exports.getGrafanaOutput = exports.getGrafana = exports.getGcpVpcPeeringConnectionOutput = exports.getGcpVpcPeeringConnection = exports.getFlinkApplicationVersionOutput = exports.getFlinkApplicationVersion = exports.getFlinkApplicationOutput = exports.getFlinkApplication = exports.getFlinkOutput = exports.getFlink = exports.getDatabaseOutput = exports.getDatabase = exports.getConnectionPoolOutput = exports.getConnectionPool = exports.getClickhouseUserOutput = exports.getClickhouseUser = exports.getClickhouseDatabaseOutput = exports.getClickhouseDatabase = exports.getClickhouseOutput = exports.getClickhouse = exports.getCassandraUserOutput = exports.getCassandraUser = void 0;
exports.InfluxDb = exports.Grafana = exports.getVpcPeeringConnectionOutput = exports.getVpcPeeringConnection = exports.getTransitGatewayVpcAttachmentOutput = exports.getTransitGatewayVpcAttachment = exports.getServiceUserOutput = exports.getServiceUser = exports.getServiceIntegrationEndpointOutput = exports.getServiceIntegrationEndpoint = exports.getServiceIntegrationOutput = exports.getServiceIntegration = exports.getServiceComponentOutput = exports.getServiceComponent = exports.getRedisUserOutput = exports.getRedisUser = exports.getRedisOutput = exports.getRedis = exports.getProjectVpcOutput = exports.getProjectVpc = exports.getProjectUserOutput = exports.getProjectUser = exports.getProjectOutput = exports.getProject = exports.getPgUserOutput = exports.getPgUser = exports.getPgDatabaseOutput = exports.getPgDatabase = exports.getPgOutput = exports.getPg = exports.getOpensearchUserOutput = exports.getOpensearchUser = exports.getOpenSearchAclRuleOutput = exports.getOpenSearchAclRule = exports.getOpenSearchAclConfigOutput = exports.getOpenSearchAclConfig = exports.getOpenSearchOutput = exports.getOpenSearch = exports.getMysqlUserOutput = exports.getMysqlUser = exports.getMysqlDatabaseOutput = exports.getMysqlDatabase = exports.getMySqlOutput = exports.getMySql = exports.getMirrorMakerReplicationFlowOutput = exports.getMirrorMakerReplicationFlow = exports.getM3dbUserOutput = exports.getM3dbUser = exports.getM3DbOutput = exports.getM3Db = void 0;
exports.types = exports.config = exports.VpcPeeringConnection = exports.TransitGatewayVpcAttachment = exports.StaticIp = exports.ServiceUser = exports.ServiceIntegrationEndpoint = exports.ServiceIntegration = exports.RedisUser = exports.Redis = exports.Provider = exports.ProjectVpc = exports.ProjectUser = exports.Project = exports.PgUser = exports.PgDatabase = exports.Pg = exports.OpensearchUser = exports.OpenSearchAclRule = exports.OpenSearchAclConfig = exports.OpenSearch = exports.MysqlUser = exports.MysqlDatabase = exports.MySql = exports.MirrorMakerReplicationFlow = exports.M3dbUser = exports.M3Db = exports.M3Aggregator = exports.KafkaUser = exports.KafkaTopic = exports.KafkaSchemaRegistryAcl = exports.KafkaSchemaConfiguration = exports.KafkaSchema = exports.KafkaMirrorMaker = exports.KafkaConnector = exports.KafkaConnect = exports.KafkaAcl = exports.Kafka = exports.InfluxdbUser = exports.InfluxdbDatabase = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Account = null;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));
exports.AccountAuthentication = null;
utilities.lazyLoad(exports, ["AccountAuthentication"], () => require("./accountAuthentication"));
exports.AccountTeam = null;
utilities.lazyLoad(exports, ["AccountTeam"], () => require("./accountTeam"));
exports.AccountTeamMember = null;
utilities.lazyLoad(exports, ["AccountTeamMember"], () => require("./accountTeamMember"));
exports.AccountTeamProject = null;
utilities.lazyLoad(exports, ["AccountTeamProject"], () => require("./accountTeamProject"));
exports.AwsPrivatelink = null;
utilities.lazyLoad(exports, ["AwsPrivatelink"], () => require("./awsPrivatelink"));
exports.AwsVpcPeeringConnection = null;
utilities.lazyLoad(exports, ["AwsVpcPeeringConnection"], () => require("./awsVpcPeeringConnection"));
exports.AzurePrivatelink = null;
utilities.lazyLoad(exports, ["AzurePrivatelink"], () => require("./azurePrivatelink"));
exports.AzurePrivatelinkConnectionApproval = null;
utilities.lazyLoad(exports, ["AzurePrivatelinkConnectionApproval"], () => require("./azurePrivatelinkConnectionApproval"));
exports.AzureVpcPeeringConnection = null;
utilities.lazyLoad(exports, ["AzureVpcPeeringConnection"], () => require("./azureVpcPeeringConnection"));
exports.BillingGroup = null;
utilities.lazyLoad(exports, ["BillingGroup"], () => require("./billingGroup"));
exports.Cassandra = null;
utilities.lazyLoad(exports, ["Cassandra"], () => require("./cassandra"));
exports.CassandraUser = null;
utilities.lazyLoad(exports, ["CassandraUser"], () => require("./cassandraUser"));
exports.Clickhouse = null;
utilities.lazyLoad(exports, ["Clickhouse"], () => require("./clickhouse"));
exports.ClickhouseDatabase = null;
utilities.lazyLoad(exports, ["ClickhouseDatabase"], () => require("./clickhouseDatabase"));
exports.ClickhouseGrant = null;
utilities.lazyLoad(exports, ["ClickhouseGrant"], () => require("./clickhouseGrant"));
exports.ClickhouseRole = null;
utilities.lazyLoad(exports, ["ClickhouseRole"], () => require("./clickhouseRole"));
exports.ClickhouseUser = null;
utilities.lazyLoad(exports, ["ClickhouseUser"], () => require("./clickhouseUser"));
exports.ConnectionPool = null;
utilities.lazyLoad(exports, ["ConnectionPool"], () => require("./connectionPool"));
exports.Database = null;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
exports.Flink = null;
utilities.lazyLoad(exports, ["Flink"], () => require("./flink"));
exports.FlinkApplication = null;
utilities.lazyLoad(exports, ["FlinkApplication"], () => require("./flinkApplication"));
exports.FlinkApplicationVersion = null;
utilities.lazyLoad(exports, ["FlinkApplicationVersion"], () => require("./flinkApplicationVersion"));
exports.FlinkJob = null;
utilities.lazyLoad(exports, ["FlinkJob"], () => require("./flinkJob"));
exports.FlinkJobTable = null;
utilities.lazyLoad(exports, ["FlinkJobTable"], () => require("./flinkJobTable"));
exports.GcpVpcPeeringConnection = null;
utilities.lazyLoad(exports, ["GcpVpcPeeringConnection"], () => require("./gcpVpcPeeringConnection"));
exports.getAccount = null;
exports.getAccountOutput = null;
utilities.lazyLoad(exports, ["getAccount", "getAccountOutput"], () => require("./getAccount"));
exports.getAccountAuthentication = null;
exports.getAccountAuthenticationOutput = null;
utilities.lazyLoad(exports, ["getAccountAuthentication", "getAccountAuthenticationOutput"], () => require("./getAccountAuthentication"));
exports.getAccountTeam = null;
exports.getAccountTeamOutput = null;
utilities.lazyLoad(exports, ["getAccountTeam", "getAccountTeamOutput"], () => require("./getAccountTeam"));
exports.getAccountTeamMember = null;
exports.getAccountTeamMemberOutput = null;
utilities.lazyLoad(exports, ["getAccountTeamMember", "getAccountTeamMemberOutput"], () => require("./getAccountTeamMember"));
exports.getAccountTeamProject = null;
exports.getAccountTeamProjectOutput = null;
utilities.lazyLoad(exports, ["getAccountTeamProject", "getAccountTeamProjectOutput"], () => require("./getAccountTeamProject"));
exports.getAwsPrivatelink = null;
exports.getAwsPrivatelinkOutput = null;
utilities.lazyLoad(exports, ["getAwsPrivatelink", "getAwsPrivatelinkOutput"], () => require("./getAwsPrivatelink"));
exports.getAwsVpcPeeringConnection = null;
exports.getAwsVpcPeeringConnectionOutput = null;
utilities.lazyLoad(exports, ["getAwsVpcPeeringConnection", "getAwsVpcPeeringConnectionOutput"], () => require("./getAwsVpcPeeringConnection"));
exports.getAzurePrivatelink = null;
exports.getAzurePrivatelinkOutput = null;
utilities.lazyLoad(exports, ["getAzurePrivatelink", "getAzurePrivatelinkOutput"], () => require("./getAzurePrivatelink"));
exports.getAzureVpcPeeringConnection = null;
exports.getAzureVpcPeeringConnectionOutput = null;
utilities.lazyLoad(exports, ["getAzureVpcPeeringConnection", "getAzureVpcPeeringConnectionOutput"], () => require("./getAzureVpcPeeringConnection"));
exports.getBillingGroup = null;
exports.getBillingGroupOutput = null;
utilities.lazyLoad(exports, ["getBillingGroup", "getBillingGroupOutput"], () => require("./getBillingGroup"));
exports.getCassanda = null;
exports.getCassandaOutput = null;
utilities.lazyLoad(exports, ["getCassanda", "getCassandaOutput"], () => require("./getCassanda"));
exports.getCassandra = null;
exports.getCassandraOutput = null;
utilities.lazyLoad(exports, ["getCassandra", "getCassandraOutput"], () => require("./getCassandra"));
exports.getCassandraUser = null;
exports.getCassandraUserOutput = null;
utilities.lazyLoad(exports, ["getCassandraUser", "getCassandraUserOutput"], () => require("./getCassandraUser"));
exports.getClickhouse = null;
exports.getClickhouseOutput = null;
utilities.lazyLoad(exports, ["getClickhouse", "getClickhouseOutput"], () => require("./getClickhouse"));
exports.getClickhouseDatabase = null;
exports.getClickhouseDatabaseOutput = null;
utilities.lazyLoad(exports, ["getClickhouseDatabase", "getClickhouseDatabaseOutput"], () => require("./getClickhouseDatabase"));
exports.getClickhouseUser = null;
exports.getClickhouseUserOutput = null;
utilities.lazyLoad(exports, ["getClickhouseUser", "getClickhouseUserOutput"], () => require("./getClickhouseUser"));
exports.getConnectionPool = null;
exports.getConnectionPoolOutput = null;
utilities.lazyLoad(exports, ["getConnectionPool", "getConnectionPoolOutput"], () => require("./getConnectionPool"));
exports.getDatabase = null;
exports.getDatabaseOutput = null;
utilities.lazyLoad(exports, ["getDatabase", "getDatabaseOutput"], () => require("./getDatabase"));
exports.getFlink = null;
exports.getFlinkOutput = null;
utilities.lazyLoad(exports, ["getFlink", "getFlinkOutput"], () => require("./getFlink"));
exports.getFlinkApplication = null;
exports.getFlinkApplicationOutput = null;
utilities.lazyLoad(exports, ["getFlinkApplication", "getFlinkApplicationOutput"], () => require("./getFlinkApplication"));
exports.getFlinkApplicationVersion = null;
exports.getFlinkApplicationVersionOutput = null;
utilities.lazyLoad(exports, ["getFlinkApplicationVersion", "getFlinkApplicationVersionOutput"], () => require("./getFlinkApplicationVersion"));
exports.getGcpVpcPeeringConnection = null;
exports.getGcpVpcPeeringConnectionOutput = null;
utilities.lazyLoad(exports, ["getGcpVpcPeeringConnection", "getGcpVpcPeeringConnectionOutput"], () => require("./getGcpVpcPeeringConnection"));
exports.getGrafana = null;
exports.getGrafanaOutput = null;
utilities.lazyLoad(exports, ["getGrafana", "getGrafanaOutput"], () => require("./getGrafana"));
exports.getInfluxDb = null;
exports.getInfluxDbOutput = null;
utilities.lazyLoad(exports, ["getInfluxDb", "getInfluxDbOutput"], () => require("./getInfluxDb"));
exports.getInfluxdbDatabase = null;
exports.getInfluxdbDatabaseOutput = null;
utilities.lazyLoad(exports, ["getInfluxdbDatabase", "getInfluxdbDatabaseOutput"], () => require("./getInfluxdbDatabase"));
exports.getInfluxdbUser = null;
exports.getInfluxdbUserOutput = null;
utilities.lazyLoad(exports, ["getInfluxdbUser", "getInfluxdbUserOutput"], () => require("./getInfluxdbUser"));
exports.getKafka = null;
exports.getKafkaOutput = null;
utilities.lazyLoad(exports, ["getKafka", "getKafkaOutput"], () => require("./getKafka"));
exports.getKafkaAcl = null;
exports.getKafkaAclOutput = null;
utilities.lazyLoad(exports, ["getKafkaAcl", "getKafkaAclOutput"], () => require("./getKafkaAcl"));
exports.getKafkaConnect = null;
exports.getKafkaConnectOutput = null;
utilities.lazyLoad(exports, ["getKafkaConnect", "getKafkaConnectOutput"], () => require("./getKafkaConnect"));
exports.getKafkaConnector = null;
exports.getKafkaConnectorOutput = null;
utilities.lazyLoad(exports, ["getKafkaConnector", "getKafkaConnectorOutput"], () => require("./getKafkaConnector"));
exports.getKafkaMirrorMaker = null;
exports.getKafkaMirrorMakerOutput = null;
utilities.lazyLoad(exports, ["getKafkaMirrorMaker", "getKafkaMirrorMakerOutput"], () => require("./getKafkaMirrorMaker"));
exports.getKafkaSchema = null;
exports.getKafkaSchemaOutput = null;
utilities.lazyLoad(exports, ["getKafkaSchema", "getKafkaSchemaOutput"], () => require("./getKafkaSchema"));
exports.getKafkaSchemaConfiguration = null;
exports.getKafkaSchemaConfigurationOutput = null;
utilities.lazyLoad(exports, ["getKafkaSchemaConfiguration", "getKafkaSchemaConfigurationOutput"], () => require("./getKafkaSchemaConfiguration"));
exports.getKafkaSchemaRegistryAcl = null;
exports.getKafkaSchemaRegistryAclOutput = null;
utilities.lazyLoad(exports, ["getKafkaSchemaRegistryAcl", "getKafkaSchemaRegistryAclOutput"], () => require("./getKafkaSchemaRegistryAcl"));
exports.getKafkaTopic = null;
exports.getKafkaTopicOutput = null;
utilities.lazyLoad(exports, ["getKafkaTopic", "getKafkaTopicOutput"], () => require("./getKafkaTopic"));
exports.getKafkaUser = null;
exports.getKafkaUserOutput = null;
utilities.lazyLoad(exports, ["getKafkaUser", "getKafkaUserOutput"], () => require("./getKafkaUser"));
exports.getM3Aggregator = null;
exports.getM3AggregatorOutput = null;
utilities.lazyLoad(exports, ["getM3Aggregator", "getM3AggregatorOutput"], () => require("./getM3Aggregator"));
exports.getM3Db = null;
exports.getM3DbOutput = null;
utilities.lazyLoad(exports, ["getM3Db", "getM3DbOutput"], () => require("./getM3Db"));
exports.getM3dbUser = null;
exports.getM3dbUserOutput = null;
utilities.lazyLoad(exports, ["getM3dbUser", "getM3dbUserOutput"], () => require("./getM3dbUser"));
exports.getMirrorMakerReplicationFlow = null;
exports.getMirrorMakerReplicationFlowOutput = null;
utilities.lazyLoad(exports, ["getMirrorMakerReplicationFlow", "getMirrorMakerReplicationFlowOutput"], () => require("./getMirrorMakerReplicationFlow"));
exports.getMySql = null;
exports.getMySqlOutput = null;
utilities.lazyLoad(exports, ["getMySql", "getMySqlOutput"], () => require("./getMySql"));
exports.getMysqlDatabase = null;
exports.getMysqlDatabaseOutput = null;
utilities.lazyLoad(exports, ["getMysqlDatabase", "getMysqlDatabaseOutput"], () => require("./getMysqlDatabase"));
exports.getMysqlUser = null;
exports.getMysqlUserOutput = null;
utilities.lazyLoad(exports, ["getMysqlUser", "getMysqlUserOutput"], () => require("./getMysqlUser"));
exports.getOpenSearch = null;
exports.getOpenSearchOutput = null;
utilities.lazyLoad(exports, ["getOpenSearch", "getOpenSearchOutput"], () => require("./getOpenSearch"));
exports.getOpenSearchAclConfig = null;
exports.getOpenSearchAclConfigOutput = null;
utilities.lazyLoad(exports, ["getOpenSearchAclConfig", "getOpenSearchAclConfigOutput"], () => require("./getOpenSearchAclConfig"));
exports.getOpenSearchAclRule = null;
exports.getOpenSearchAclRuleOutput = null;
utilities.lazyLoad(exports, ["getOpenSearchAclRule", "getOpenSearchAclRuleOutput"], () => require("./getOpenSearchAclRule"));
exports.getOpensearchUser = null;
exports.getOpensearchUserOutput = null;
utilities.lazyLoad(exports, ["getOpensearchUser", "getOpensearchUserOutput"], () => require("./getOpensearchUser"));
exports.getPg = null;
exports.getPgOutput = null;
utilities.lazyLoad(exports, ["getPg", "getPgOutput"], () => require("./getPg"));
exports.getPgDatabase = null;
exports.getPgDatabaseOutput = null;
utilities.lazyLoad(exports, ["getPgDatabase", "getPgDatabaseOutput"], () => require("./getPgDatabase"));
exports.getPgUser = null;
exports.getPgUserOutput = null;
utilities.lazyLoad(exports, ["getPgUser", "getPgUserOutput"], () => require("./getPgUser"));
exports.getProject = null;
exports.getProjectOutput = null;
utilities.lazyLoad(exports, ["getProject", "getProjectOutput"], () => require("./getProject"));
exports.getProjectUser = null;
exports.getProjectUserOutput = null;
utilities.lazyLoad(exports, ["getProjectUser", "getProjectUserOutput"], () => require("./getProjectUser"));
exports.getProjectVpc = null;
exports.getProjectVpcOutput = null;
utilities.lazyLoad(exports, ["getProjectVpc", "getProjectVpcOutput"], () => require("./getProjectVpc"));
exports.getRedis = null;
exports.getRedisOutput = null;
utilities.lazyLoad(exports, ["getRedis", "getRedisOutput"], () => require("./getRedis"));
exports.getRedisUser = null;
exports.getRedisUserOutput = null;
utilities.lazyLoad(exports, ["getRedisUser", "getRedisUserOutput"], () => require("./getRedisUser"));
exports.getServiceComponent = null;
exports.getServiceComponentOutput = null;
utilities.lazyLoad(exports, ["getServiceComponent", "getServiceComponentOutput"], () => require("./getServiceComponent"));
exports.getServiceIntegration = null;
exports.getServiceIntegrationOutput = null;
utilities.lazyLoad(exports, ["getServiceIntegration", "getServiceIntegrationOutput"], () => require("./getServiceIntegration"));
exports.getServiceIntegrationEndpoint = null;
exports.getServiceIntegrationEndpointOutput = null;
utilities.lazyLoad(exports, ["getServiceIntegrationEndpoint", "getServiceIntegrationEndpointOutput"], () => require("./getServiceIntegrationEndpoint"));
exports.getServiceUser = null;
exports.getServiceUserOutput = null;
utilities.lazyLoad(exports, ["getServiceUser", "getServiceUserOutput"], () => require("./getServiceUser"));
exports.getTransitGatewayVpcAttachment = null;
exports.getTransitGatewayVpcAttachmentOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayVpcAttachment", "getTransitGatewayVpcAttachmentOutput"], () => require("./getTransitGatewayVpcAttachment"));
exports.getVpcPeeringConnection = null;
exports.getVpcPeeringConnectionOutput = null;
utilities.lazyLoad(exports, ["getVpcPeeringConnection", "getVpcPeeringConnectionOutput"], () => require("./getVpcPeeringConnection"));
exports.Grafana = null;
utilities.lazyLoad(exports, ["Grafana"], () => require("./grafana"));
exports.InfluxDb = null;
utilities.lazyLoad(exports, ["InfluxDb"], () => require("./influxDb"));
exports.InfluxdbDatabase = null;
utilities.lazyLoad(exports, ["InfluxdbDatabase"], () => require("./influxdbDatabase"));
exports.InfluxdbUser = null;
utilities.lazyLoad(exports, ["InfluxdbUser"], () => require("./influxdbUser"));
exports.Kafka = null;
utilities.lazyLoad(exports, ["Kafka"], () => require("./kafka"));
exports.KafkaAcl = null;
utilities.lazyLoad(exports, ["KafkaAcl"], () => require("./kafkaAcl"));
exports.KafkaConnect = null;
utilities.lazyLoad(exports, ["KafkaConnect"], () => require("./kafkaConnect"));
exports.KafkaConnector = null;
utilities.lazyLoad(exports, ["KafkaConnector"], () => require("./kafkaConnector"));
exports.KafkaMirrorMaker = null;
utilities.lazyLoad(exports, ["KafkaMirrorMaker"], () => require("./kafkaMirrorMaker"));
exports.KafkaSchema = null;
utilities.lazyLoad(exports, ["KafkaSchema"], () => require("./kafkaSchema"));
exports.KafkaSchemaConfiguration = null;
utilities.lazyLoad(exports, ["KafkaSchemaConfiguration"], () => require("./kafkaSchemaConfiguration"));
exports.KafkaSchemaRegistryAcl = null;
utilities.lazyLoad(exports, ["KafkaSchemaRegistryAcl"], () => require("./kafkaSchemaRegistryAcl"));
exports.KafkaTopic = null;
utilities.lazyLoad(exports, ["KafkaTopic"], () => require("./kafkaTopic"));
exports.KafkaUser = null;
utilities.lazyLoad(exports, ["KafkaUser"], () => require("./kafkaUser"));
exports.M3Aggregator = null;
utilities.lazyLoad(exports, ["M3Aggregator"], () => require("./m3aggregator"));
exports.M3Db = null;
utilities.lazyLoad(exports, ["M3Db"], () => require("./m3db"));
exports.M3dbUser = null;
utilities.lazyLoad(exports, ["M3dbUser"], () => require("./m3dbUser"));
exports.MirrorMakerReplicationFlow = null;
utilities.lazyLoad(exports, ["MirrorMakerReplicationFlow"], () => require("./mirrorMakerReplicationFlow"));
exports.MySql = null;
utilities.lazyLoad(exports, ["MySql"], () => require("./mySql"));
exports.MysqlDatabase = null;
utilities.lazyLoad(exports, ["MysqlDatabase"], () => require("./mysqlDatabase"));
exports.MysqlUser = null;
utilities.lazyLoad(exports, ["MysqlUser"], () => require("./mysqlUser"));
exports.OpenSearch = null;
utilities.lazyLoad(exports, ["OpenSearch"], () => require("./openSearch"));
exports.OpenSearchAclConfig = null;
utilities.lazyLoad(exports, ["OpenSearchAclConfig"], () => require("./openSearchAclConfig"));
exports.OpenSearchAclRule = null;
utilities.lazyLoad(exports, ["OpenSearchAclRule"], () => require("./openSearchAclRule"));
exports.OpensearchUser = null;
utilities.lazyLoad(exports, ["OpensearchUser"], () => require("./opensearchUser"));
exports.Pg = null;
utilities.lazyLoad(exports, ["Pg"], () => require("./pg"));
exports.PgDatabase = null;
utilities.lazyLoad(exports, ["PgDatabase"], () => require("./pgDatabase"));
exports.PgUser = null;
utilities.lazyLoad(exports, ["PgUser"], () => require("./pgUser"));
exports.Project = null;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));
exports.ProjectUser = null;
utilities.lazyLoad(exports, ["ProjectUser"], () => require("./projectUser"));
exports.ProjectVpc = null;
utilities.lazyLoad(exports, ["ProjectVpc"], () => require("./projectVpc"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.Redis = null;
utilities.lazyLoad(exports, ["Redis"], () => require("./redis"));
exports.RedisUser = null;
utilities.lazyLoad(exports, ["RedisUser"], () => require("./redisUser"));
exports.ServiceIntegration = null;
utilities.lazyLoad(exports, ["ServiceIntegration"], () => require("./serviceIntegration"));
exports.ServiceIntegrationEndpoint = null;
utilities.lazyLoad(exports, ["ServiceIntegrationEndpoint"], () => require("./serviceIntegrationEndpoint"));
exports.ServiceUser = null;
utilities.lazyLoad(exports, ["ServiceUser"], () => require("./serviceUser"));
exports.StaticIp = null;
utilities.lazyLoad(exports, ["StaticIp"], () => require("./staticIp"));
exports.TransitGatewayVpcAttachment = null;
utilities.lazyLoad(exports, ["TransitGatewayVpcAttachment"], () => require("./transitGatewayVpcAttachment"));
exports.VpcPeeringConnection = null;
utilities.lazyLoad(exports, ["VpcPeeringConnection"], () => require("./vpcPeeringConnection"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aiven:index/account:Account":
                return new exports.Account(name, undefined, { urn });
            case "aiven:index/accountAuthentication:AccountAuthentication":
                return new exports.AccountAuthentication(name, undefined, { urn });
            case "aiven:index/accountTeam:AccountTeam":
                return new exports.AccountTeam(name, undefined, { urn });
            case "aiven:index/accountTeamMember:AccountTeamMember":
                return new exports.AccountTeamMember(name, undefined, { urn });
            case "aiven:index/accountTeamProject:AccountTeamProject":
                return new exports.AccountTeamProject(name, undefined, { urn });
            case "aiven:index/awsPrivatelink:AwsPrivatelink":
                return new exports.AwsPrivatelink(name, undefined, { urn });
            case "aiven:index/awsVpcPeeringConnection:AwsVpcPeeringConnection":
                return new exports.AwsVpcPeeringConnection(name, undefined, { urn });
            case "aiven:index/azurePrivatelink:AzurePrivatelink":
                return new exports.AzurePrivatelink(name, undefined, { urn });
            case "aiven:index/azurePrivatelinkConnectionApproval:AzurePrivatelinkConnectionApproval":
                return new exports.AzurePrivatelinkConnectionApproval(name, undefined, { urn });
            case "aiven:index/azureVpcPeeringConnection:AzureVpcPeeringConnection":
                return new exports.AzureVpcPeeringConnection(name, undefined, { urn });
            case "aiven:index/billingGroup:BillingGroup":
                return new exports.BillingGroup(name, undefined, { urn });
            case "aiven:index/cassandra:Cassandra":
                return new exports.Cassandra(name, undefined, { urn });
            case "aiven:index/cassandraUser:CassandraUser":
                return new exports.CassandraUser(name, undefined, { urn });
            case "aiven:index/clickhouse:Clickhouse":
                return new exports.Clickhouse(name, undefined, { urn });
            case "aiven:index/clickhouseDatabase:ClickhouseDatabase":
                return new exports.ClickhouseDatabase(name, undefined, { urn });
            case "aiven:index/clickhouseGrant:ClickhouseGrant":
                return new exports.ClickhouseGrant(name, undefined, { urn });
            case "aiven:index/clickhouseRole:ClickhouseRole":
                return new exports.ClickhouseRole(name, undefined, { urn });
            case "aiven:index/clickhouseUser:ClickhouseUser":
                return new exports.ClickhouseUser(name, undefined, { urn });
            case "aiven:index/connectionPool:ConnectionPool":
                return new exports.ConnectionPool(name, undefined, { urn });
            case "aiven:index/database:Database":
                return new exports.Database(name, undefined, { urn });
            case "aiven:index/flink:Flink":
                return new exports.Flink(name, undefined, { urn });
            case "aiven:index/flinkApplication:FlinkApplication":
                return new exports.FlinkApplication(name, undefined, { urn });
            case "aiven:index/flinkApplicationVersion:FlinkApplicationVersion":
                return new exports.FlinkApplicationVersion(name, undefined, { urn });
            case "aiven:index/flinkJob:FlinkJob":
                return new exports.FlinkJob(name, undefined, { urn });
            case "aiven:index/flinkJobTable:FlinkJobTable":
                return new exports.FlinkJobTable(name, undefined, { urn });
            case "aiven:index/gcpVpcPeeringConnection:GcpVpcPeeringConnection":
                return new exports.GcpVpcPeeringConnection(name, undefined, { urn });
            case "aiven:index/grafana:Grafana":
                return new exports.Grafana(name, undefined, { urn });
            case "aiven:index/influxDb:InfluxDb":
                return new exports.InfluxDb(name, undefined, { urn });
            case "aiven:index/influxdbDatabase:InfluxdbDatabase":
                return new exports.InfluxdbDatabase(name, undefined, { urn });
            case "aiven:index/influxdbUser:InfluxdbUser":
                return new exports.InfluxdbUser(name, undefined, { urn });
            case "aiven:index/kafka:Kafka":
                return new exports.Kafka(name, undefined, { urn });
            case "aiven:index/kafkaAcl:KafkaAcl":
                return new exports.KafkaAcl(name, undefined, { urn });
            case "aiven:index/kafkaConnect:KafkaConnect":
                return new exports.KafkaConnect(name, undefined, { urn });
            case "aiven:index/kafkaConnector:KafkaConnector":
                return new exports.KafkaConnector(name, undefined, { urn });
            case "aiven:index/kafkaMirrorMaker:KafkaMirrorMaker":
                return new exports.KafkaMirrorMaker(name, undefined, { urn });
            case "aiven:index/kafkaSchema:KafkaSchema":
                return new exports.KafkaSchema(name, undefined, { urn });
            case "aiven:index/kafkaSchemaConfiguration:KafkaSchemaConfiguration":
                return new exports.KafkaSchemaConfiguration(name, undefined, { urn });
            case "aiven:index/kafkaSchemaRegistryAcl:KafkaSchemaRegistryAcl":
                return new exports.KafkaSchemaRegistryAcl(name, undefined, { urn });
            case "aiven:index/kafkaTopic:KafkaTopic":
                return new exports.KafkaTopic(name, undefined, { urn });
            case "aiven:index/kafkaUser:KafkaUser":
                return new exports.KafkaUser(name, undefined, { urn });
            case "aiven:index/m3Aggregator:M3Aggregator":
                return new exports.M3Aggregator(name, undefined, { urn });
            case "aiven:index/m3Db:M3Db":
                return new exports.M3Db(name, undefined, { urn });
            case "aiven:index/m3dbUser:M3dbUser":
                return new exports.M3dbUser(name, undefined, { urn });
            case "aiven:index/mirrorMakerReplicationFlow:MirrorMakerReplicationFlow":
                return new exports.MirrorMakerReplicationFlow(name, undefined, { urn });
            case "aiven:index/mySql:MySql":
                return new exports.MySql(name, undefined, { urn });
            case "aiven:index/mysqlDatabase:MysqlDatabase":
                return new exports.MysqlDatabase(name, undefined, { urn });
            case "aiven:index/mysqlUser:MysqlUser":
                return new exports.MysqlUser(name, undefined, { urn });
            case "aiven:index/openSearch:OpenSearch":
                return new exports.OpenSearch(name, undefined, { urn });
            case "aiven:index/openSearchAclConfig:OpenSearchAclConfig":
                return new exports.OpenSearchAclConfig(name, undefined, { urn });
            case "aiven:index/openSearchAclRule:OpenSearchAclRule":
                return new exports.OpenSearchAclRule(name, undefined, { urn });
            case "aiven:index/opensearchUser:OpensearchUser":
                return new exports.OpensearchUser(name, undefined, { urn });
            case "aiven:index/pg:Pg":
                return new exports.Pg(name, undefined, { urn });
            case "aiven:index/pgDatabase:PgDatabase":
                return new exports.PgDatabase(name, undefined, { urn });
            case "aiven:index/pgUser:PgUser":
                return new exports.PgUser(name, undefined, { urn });
            case "aiven:index/project:Project":
                return new exports.Project(name, undefined, { urn });
            case "aiven:index/projectUser:ProjectUser":
                return new exports.ProjectUser(name, undefined, { urn });
            case "aiven:index/projectVpc:ProjectVpc":
                return new exports.ProjectVpc(name, undefined, { urn });
            case "aiven:index/redis:Redis":
                return new exports.Redis(name, undefined, { urn });
            case "aiven:index/redisUser:RedisUser":
                return new exports.RedisUser(name, undefined, { urn });
            case "aiven:index/serviceIntegration:ServiceIntegration":
                return new exports.ServiceIntegration(name, undefined, { urn });
            case "aiven:index/serviceIntegrationEndpoint:ServiceIntegrationEndpoint":
                return new exports.ServiceIntegrationEndpoint(name, undefined, { urn });
            case "aiven:index/serviceUser:ServiceUser":
                return new exports.ServiceUser(name, undefined, { urn });
            case "aiven:index/staticIp:StaticIp":
                return new exports.StaticIp(name, undefined, { urn });
            case "aiven:index/transitGatewayVpcAttachment:TransitGatewayVpcAttachment":
                return new exports.TransitGatewayVpcAttachment(name, undefined, { urn });
            case "aiven:index/vpcPeeringConnection:VpcPeeringConnection":
                return new exports.VpcPeeringConnection(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aiven", "index/account", _module);
pulumi.runtime.registerResourceModule("aiven", "index/accountAuthentication", _module);
pulumi.runtime.registerResourceModule("aiven", "index/accountTeam", _module);
pulumi.runtime.registerResourceModule("aiven", "index/accountTeamMember", _module);
pulumi.runtime.registerResourceModule("aiven", "index/accountTeamProject", _module);
pulumi.runtime.registerResourceModule("aiven", "index/awsPrivatelink", _module);
pulumi.runtime.registerResourceModule("aiven", "index/awsVpcPeeringConnection", _module);
pulumi.runtime.registerResourceModule("aiven", "index/azurePrivatelink", _module);
pulumi.runtime.registerResourceModule("aiven", "index/azurePrivatelinkConnectionApproval", _module);
pulumi.runtime.registerResourceModule("aiven", "index/azureVpcPeeringConnection", _module);
pulumi.runtime.registerResourceModule("aiven", "index/billingGroup", _module);
pulumi.runtime.registerResourceModule("aiven", "index/cassandra", _module);
pulumi.runtime.registerResourceModule("aiven", "index/cassandraUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/clickhouse", _module);
pulumi.runtime.registerResourceModule("aiven", "index/clickhouseDatabase", _module);
pulumi.runtime.registerResourceModule("aiven", "index/clickhouseGrant", _module);
pulumi.runtime.registerResourceModule("aiven", "index/clickhouseRole", _module);
pulumi.runtime.registerResourceModule("aiven", "index/clickhouseUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/connectionPool", _module);
pulumi.runtime.registerResourceModule("aiven", "index/database", _module);
pulumi.runtime.registerResourceModule("aiven", "index/flink", _module);
pulumi.runtime.registerResourceModule("aiven", "index/flinkApplication", _module);
pulumi.runtime.registerResourceModule("aiven", "index/flinkApplicationVersion", _module);
pulumi.runtime.registerResourceModule("aiven", "index/flinkJob", _module);
pulumi.runtime.registerResourceModule("aiven", "index/flinkJobTable", _module);
pulumi.runtime.registerResourceModule("aiven", "index/gcpVpcPeeringConnection", _module);
pulumi.runtime.registerResourceModule("aiven", "index/grafana", _module);
pulumi.runtime.registerResourceModule("aiven", "index/influxDb", _module);
pulumi.runtime.registerResourceModule("aiven", "index/influxdbDatabase", _module);
pulumi.runtime.registerResourceModule("aiven", "index/influxdbUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafka", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafkaAcl", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafkaConnect", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafkaConnector", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafkaMirrorMaker", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafkaSchema", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafkaSchemaConfiguration", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafkaSchemaRegistryAcl", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafkaTopic", _module);
pulumi.runtime.registerResourceModule("aiven", "index/kafkaUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/m3Aggregator", _module);
pulumi.runtime.registerResourceModule("aiven", "index/m3Db", _module);
pulumi.runtime.registerResourceModule("aiven", "index/m3dbUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/mirrorMakerReplicationFlow", _module);
pulumi.runtime.registerResourceModule("aiven", "index/mySql", _module);
pulumi.runtime.registerResourceModule("aiven", "index/mysqlDatabase", _module);
pulumi.runtime.registerResourceModule("aiven", "index/mysqlUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/openSearch", _module);
pulumi.runtime.registerResourceModule("aiven", "index/openSearchAclConfig", _module);
pulumi.runtime.registerResourceModule("aiven", "index/openSearchAclRule", _module);
pulumi.runtime.registerResourceModule("aiven", "index/opensearchUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/pg", _module);
pulumi.runtime.registerResourceModule("aiven", "index/pgDatabase", _module);
pulumi.runtime.registerResourceModule("aiven", "index/pgUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/project", _module);
pulumi.runtime.registerResourceModule("aiven", "index/projectUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/projectVpc", _module);
pulumi.runtime.registerResourceModule("aiven", "index/redis", _module);
pulumi.runtime.registerResourceModule("aiven", "index/redisUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/serviceIntegration", _module);
pulumi.runtime.registerResourceModule("aiven", "index/serviceIntegrationEndpoint", _module);
pulumi.runtime.registerResourceModule("aiven", "index/serviceUser", _module);
pulumi.runtime.registerResourceModule("aiven", "index/staticIp", _module);
pulumi.runtime.registerResourceModule("aiven", "index/transitGatewayVpcAttachment", _module);
pulumi.runtime.registerResourceModule("aiven", "index/vpcPeeringConnection", _module);
pulumi.runtime.registerResourcePackage("aiven", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:aiven") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map