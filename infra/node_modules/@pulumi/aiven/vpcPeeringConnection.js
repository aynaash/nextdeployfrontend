"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcPeeringConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/vpcPeeringConnection:VpcPeeringConnection mypeeringconnection project/vpc_id/peer_cloud_account/peer_vpc/peer_region
 * ```
 */
class VpcPeeringConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpcPeeringConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VpcPeeringConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VpcPeeringConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcPeeringConnection.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["peerAzureAppId"] = state ? state.peerAzureAppId : undefined;
            resourceInputs["peerAzureTenantId"] = state ? state.peerAzureTenantId : undefined;
            resourceInputs["peerCloudAccount"] = state ? state.peerCloudAccount : undefined;
            resourceInputs["peerRegion"] = state ? state.peerRegion : undefined;
            resourceInputs["peerResourceGroup"] = state ? state.peerResourceGroup : undefined;
            resourceInputs["peerVpc"] = state ? state.peerVpc : undefined;
            resourceInputs["peeringConnectionId"] = state ? state.peeringConnectionId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateInfo"] = state ? state.stateInfo : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.peerCloudAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerCloudAccount'");
            }
            if ((!args || args.peerVpc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerVpc'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["peerAzureAppId"] = args ? args.peerAzureAppId : undefined;
            resourceInputs["peerAzureTenantId"] = args ? args.peerAzureTenantId : undefined;
            resourceInputs["peerCloudAccount"] = args ? args.peerCloudAccount : undefined;
            resourceInputs["peerRegion"] = args ? args.peerRegion : undefined;
            resourceInputs["peerResourceGroup"] = args ? args.peerResourceGroup : undefined;
            resourceInputs["peerVpc"] = args ? args.peerVpc : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["peeringConnectionId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateInfo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcPeeringConnection.__pulumiType, name, resourceInputs, opts);
    }
}
exports.VpcPeeringConnection = VpcPeeringConnection;
/** @internal */
VpcPeeringConnection.__pulumiType = 'aiven:index/vpcPeeringConnection:VpcPeeringConnection';
//# sourceMappingURL=vpcPeeringConnection.js.map