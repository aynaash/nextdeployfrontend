"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Flink = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The Flink resource allows the creation and management of Aiven Flink services.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aiven from "@pulumi/aiven";
 *
 * const flink = new aiven.Flink("flink", {
 *     project: data.aiven_project.pr1.project,
 *     cloudName: "google-europe-west1",
 *     plan: "business-4",
 *     serviceName: "my-flink",
 *     maintenanceWindowDow: "monday",
 *     maintenanceWindowTime: "10:00:00",
 *     flinkUserConfig: {
 *         flinkVersion: "1.15",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import aiven:index/flink:Flink flink project/service_name
 * ```
 */
class Flink extends pulumi.CustomResource {
    /**
     * Get an existing Flink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Flink(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Flink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Flink.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalDiskSpace"] = state ? state.additionalDiskSpace : undefined;
            resourceInputs["cloudName"] = state ? state.cloudName : undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["diskSpace"] = state ? state.diskSpace : undefined;
            resourceInputs["diskSpaceCap"] = state ? state.diskSpaceCap : undefined;
            resourceInputs["diskSpaceDefault"] = state ? state.diskSpaceDefault : undefined;
            resourceInputs["diskSpaceStep"] = state ? state.diskSpaceStep : undefined;
            resourceInputs["diskSpaceUsed"] = state ? state.diskSpaceUsed : undefined;
            resourceInputs["flink"] = state ? state.flink : undefined;
            resourceInputs["flinkUserConfig"] = state ? state.flinkUserConfig : undefined;
            resourceInputs["maintenanceWindowDow"] = state ? state.maintenanceWindowDow : undefined;
            resourceInputs["maintenanceWindowTime"] = state ? state.maintenanceWindowTime : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectVpcId"] = state ? state.projectVpcId : undefined;
            resourceInputs["serviceHost"] = state ? state.serviceHost : undefined;
            resourceInputs["serviceIntegrations"] = state ? state.serviceIntegrations : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["servicePassword"] = state ? state.servicePassword : undefined;
            resourceInputs["servicePort"] = state ? state.servicePort : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["serviceUri"] = state ? state.serviceUri : undefined;
            resourceInputs["serviceUsername"] = state ? state.serviceUsername : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["staticIps"] = state ? state.staticIps : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["additionalDiskSpace"] = args ? args.additionalDiskSpace : undefined;
            resourceInputs["cloudName"] = args ? args.cloudName : undefined;
            resourceInputs["diskSpace"] = args ? args.diskSpace : undefined;
            resourceInputs["flink"] = args ? args.flink : undefined;
            resourceInputs["flinkUserConfig"] = args ? args.flinkUserConfig : undefined;
            resourceInputs["maintenanceWindowDow"] = args ? args.maintenanceWindowDow : undefined;
            resourceInputs["maintenanceWindowTime"] = args ? args.maintenanceWindowTime : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectVpcId"] = args ? args.projectVpcId : undefined;
            resourceInputs["serviceIntegrations"] = args ? args.serviceIntegrations : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["staticIps"] = args ? args.staticIps : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["components"] = undefined /*out*/;
            resourceInputs["diskSpaceCap"] = undefined /*out*/;
            resourceInputs["diskSpaceDefault"] = undefined /*out*/;
            resourceInputs["diskSpaceStep"] = undefined /*out*/;
            resourceInputs["diskSpaceUsed"] = undefined /*out*/;
            resourceInputs["serviceHost"] = undefined /*out*/;
            resourceInputs["servicePassword"] = undefined /*out*/;
            resourceInputs["servicePort"] = undefined /*out*/;
            resourceInputs["serviceType"] = undefined /*out*/;
            resourceInputs["serviceUri"] = undefined /*out*/;
            resourceInputs["serviceUsername"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["servicePassword", "serviceUri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Flink.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Flink = Flink;
/** @internal */
Flink.__pulumiType = 'aiven:index/flink:Flink';
//# sourceMappingURL=flink.js.map